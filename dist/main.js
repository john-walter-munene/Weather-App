(()=>{"use strict";var t={484:(t,e,n)=>{n.d(e,{A:()=>m});var r=n(354),o=n.n(r),a=n(314),i=n.n(a),s=n(417),c=n.n(s),u=new URL(n(778),n.b),d=new URL(n(643),n.b),l=i()(o()),h=c()(u),f=c()(d);l.push([t.id,`@font-face {\n    font-family: 'Quattrocento_Sans';\n    src: url(${h}) format('truetype');\n    font-weight: 600;\n    font-style: normal;\n}\n\n* {\n    font-family: 'Quattrocento_Sans', Arial, Helvetica, sans-serif;\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    background-color: #d4d4d8;\n}\n\n.weather-app {\n    width: 80vw;\n    height: 90vh;\n    margin: 5vh auto;\n    background-image: url(${f});\n    background-size: cover;\n    background-position: center;\n    background-repeat: no-repeat;\n    border-radius: 16px;\n    display: flex;\n    gap: 80px;\n    padding: 30px 60px;\n    color: azure;\n    min-width: 1212px;\n}\n\n.overview {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n}\n\n.full-details {\n    flex: 4;\n    display: flex;\n    flex-direction: column;\n}\n\n.search-form {\n    position: relative;\n    border-bottom: 3px solid azure;\n}\n.search-form img:first-child {\n    position: absolute;\n    left: 0;\n    width: 30px;\n    height: 30px;\n    padding-right: 15px;\n}\n\n.search-icon {\n    position: absolute;\n    top: 5px;\n    right: 20px;\n    width: 25px;\n    height: 25px;\n}\n\ninput {\n    appearance: none;\n    background: none;\n    border: none\n  }\n\ninput[type="search"] {\n    width: 100%;\n    height: 30px;\n    padding-left: 20px;\n    color: azure;\n}\n\ninput[type="search"]:focus {\n    border: none;\n    font-size: 18px;\n}\n\n.overview {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n}\n\n.temperature-disp p:first-child {\n    font-size: 30px;\n}\n\n.temperature-disp p:last-child {\n    font-size: 18px;\n}\n\n.location-details p:first-child {\n    margin-top: 8px;\n    font-size: 30px;\n}\n\n.location-details ol {\n    list-style: none;\n    font-size: 14px;\n}\n\n.brief-summary h3 {\n    font-size: 30px;\n    padding-bottom: 10px;\n}\n\n.brief-summary p {\n    font-size: 14px;\n}\n\n.weather-gif img {\n    width: 100%;\n    height: 160px;\n    border-radius: 8px;\n}\n\n.full-details {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n}\n\n.last-searches {\n    display: flex;\n}\n\n.app-name {\n    font-size: 25px;\n    font-weight: bold;\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n}\n\n.weather-forecast p {\n    font-weight: bold;\n    font-size: 20px;\n    padding-bottom: 10px;\n}\n\n.weather-forecast h1 {\n    font-weight: bold;\n    font-size: 40px;\n}\n\n.weathercast-description p:first-child {\n    font-weight: 1000;\n    font-family: Arial, Helvetica, sans-serif;\n    padding-bottom: 15px;\n}\n\n.toggler {\n    width: 100px;\n    padding: 8px;\n    border: 1px solid #083344;\n    border-radius: 15px;\n    background-color: rgb(23, 23, 23, 0.5);\n    color: azure;\n    margin-bottom: 10px;\n    cursor: pointer;\n    font-weight: bold;\n}\n\n.last-searches {\n    display: flex;\n    justify-content: start;\n}\n\n.last-searches div {\n    padding-bottom: 5px;\n    border-bottom: 2px double azure;\n    margin-right: 50px;\n}\n\n.loading-component {\n    position: absolute;\n    top: 50%;\n    left: 30%;\n    font-size: 25px;\n    font-weight: 1000;\n    padding: 15px;\n    border: 2px solid rgba(5, 119, 218, 0.5);\n    border-radius: 10px;\n}`,"",{version:3,sources:["webpack://./src/resources/styless.css"],names:[],mappings:"AAAA;IACI,gCAAgC;IAChC,+DAAsF;IACtF,gBAAgB;IAChB,kBAAkB;AACtB;;AAEA;IACI,8DAA8D;IAC9D,SAAS;IACT,UAAU;IACV,sBAAsB;AAC1B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,gBAAgB;IAChB,yDAA4C;IAC5C,sBAAsB;IACtB,2BAA2B;IAC3B,4BAA4B;IAC5B,mBAAmB;IACnB,aAAa;IACb,SAAS;IACT,kBAAkB;IAClB,YAAY;IACZ,iBAAiB;AACrB;;AAEA;IACI,OAAO;IACP,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,OAAO;IACP,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,kBAAkB;IAClB,8BAA8B;AAClC;AACA;IACI,kBAAkB;IAClB,OAAO;IACP,WAAW;IACX,YAAY;IACZ,mBAAmB;AACvB;;AAEA;IACI,kBAAkB;IAClB,QAAQ;IACR,WAAW;IACX,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,gBAAgB;IAChB,gBAAgB;IAChB;EACF;;AAEF;IACI,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,YAAY;AAChB;;AAEA;IACI,YAAY;IACZ,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,6BAA6B;AACjC;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;IACf,eAAe;AACnB;;AAEA;IACI,gBAAgB;IAChB,eAAe;AACnB;;AAEA;IACI,eAAe;IACf,oBAAoB;AACxB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,WAAW;IACX,aAAa;IACb,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,6BAA6B;AACjC;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,eAAe;IACf,iBAAiB;IACjB,4DAA4D;AAChE;;AAEA;IACI,iBAAiB;IACjB,eAAe;IACf,oBAAoB;AACxB;;AAEA;IACI,iBAAiB;IACjB,eAAe;AACnB;;AAEA;IACI,iBAAiB;IACjB,yCAAyC;IACzC,oBAAoB;AACxB;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,yBAAyB;IACzB,mBAAmB;IACnB,sCAAsC;IACtC,YAAY;IACZ,mBAAmB;IACnB,eAAe;IACf,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,mBAAmB;IACnB,+BAA+B;IAC/B,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;IAClB,QAAQ;IACR,SAAS;IACT,eAAe;IACf,iBAAiB;IACjB,aAAa;IACb,wCAAwC;IACxC,mBAAmB;AACvB",sourcesContent:["@font-face {\r\n    font-family: 'Quattrocento_Sans';\r\n    src: url('../fonts/Quattrocento_Sans/QuattrocentoSans-Regular.ttf') format('truetype');\r\n    font-weight: 600;\r\n    font-style: normal;\r\n}\r\n\r\n* {\r\n    font-family: 'Quattrocento_Sans', Arial, Helvetica, sans-serif;\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\nbody {\r\n    background-color: #d4d4d8;\r\n}\r\n\r\n.weather-app {\r\n    width: 80vw;\r\n    height: 90vh;\r\n    margin: 5vh auto;\r\n    background-image: url('../images/image.png');\r\n    background-size: cover;\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n    border-radius: 16px;\r\n    display: flex;\r\n    gap: 80px;\r\n    padding: 30px 60px;\r\n    color: azure;\r\n    min-width: 1212px;\r\n}\r\n\r\n.overview {\r\n    flex: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.full-details {\r\n    flex: 4;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.search-form {\r\n    position: relative;\r\n    border-bottom: 3px solid azure;\r\n}\r\n.search-form img:first-child {\r\n    position: absolute;\r\n    left: 0;\r\n    width: 30px;\r\n    height: 30px;\r\n    padding-right: 15px;\r\n}\r\n\r\n.search-icon {\r\n    position: absolute;\r\n    top: 5px;\r\n    right: 20px;\r\n    width: 25px;\r\n    height: 25px;\r\n}\r\n\r\ninput {\r\n    appearance: none;\r\n    background: none;\r\n    border: none\r\n  }\r\n\r\ninput[type=\"search\"] {\r\n    width: 100%;\r\n    height: 30px;\r\n    padding-left: 20px;\r\n    color: azure;\r\n}\r\n\r\ninput[type=\"search\"]:focus {\r\n    border: none;\r\n    font-size: 18px;\r\n}\r\n\r\n.overview {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-evenly;\r\n}\r\n\r\n.temperature-disp p:first-child {\r\n    font-size: 30px;\r\n}\r\n\r\n.temperature-disp p:last-child {\r\n    font-size: 18px;\r\n}\r\n\r\n.location-details p:first-child {\r\n    margin-top: 8px;\r\n    font-size: 30px;\r\n}\r\n\r\n.location-details ol {\r\n    list-style: none;\r\n    font-size: 14px;\r\n}\r\n\r\n.brief-summary h3 {\r\n    font-size: 30px;\r\n    padding-bottom: 10px;\r\n}\r\n\r\n.brief-summary p {\r\n    font-size: 14px;\r\n}\r\n\r\n.weather-gif img {\r\n    width: 100%;\r\n    height: 160px;\r\n    border-radius: 8px;\r\n}\r\n\r\n.full-details {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-evenly;\r\n}\r\n\r\n.last-searches {\r\n    display: flex;\r\n}\r\n\r\n.app-name {\r\n    font-size: 25px;\r\n    font-weight: bold;\r\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n}\r\n\r\n.weather-forecast p {\r\n    font-weight: bold;\r\n    font-size: 20px;\r\n    padding-bottom: 10px;\r\n}\r\n\r\n.weather-forecast h1 {\r\n    font-weight: bold;\r\n    font-size: 40px;\r\n}\r\n\r\n.weathercast-description p:first-child {\r\n    font-weight: 1000;\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    padding-bottom: 15px;\r\n}\r\n\r\n.toggler {\r\n    width: 100px;\r\n    padding: 8px;\r\n    border: 1px solid #083344;\r\n    border-radius: 15px;\r\n    background-color: rgb(23, 23, 23, 0.5);\r\n    color: azure;\r\n    margin-bottom: 10px;\r\n    cursor: pointer;\r\n    font-weight: bold;\r\n}\r\n\r\n.last-searches {\r\n    display: flex;\r\n    justify-content: start;\r\n}\r\n\r\n.last-searches div {\r\n    padding-bottom: 5px;\r\n    border-bottom: 2px double azure;\r\n    margin-right: 50px;\r\n}\r\n\r\n.loading-component {\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 30%;\r\n    font-size: 25px;\r\n    font-weight: 1000;\r\n    padding: 15px;\r\n    border: 2px solid rgba(5, 119, 218, 0.5);\r\n    border-radius: 10px;\r\n}"],sourceRoot:""}]);const m=l},314:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,o,a){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var u=0;u<t.length;u++){var d=[].concat(t[u]);r&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),e.push(d))}},e}},417:t=>{t.exports=function(t,e){return e||(e={}),t?(t=String(t.__esModule?t.default:t),/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]|(%20)/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t):t}},354:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},72:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var a={},i=[],s=0;s<t.length;s++){var c=t[s],u=r.base?c[0]+r.base:c[0],d=a[u]||0,l="".concat(u," ").concat(d);a[u]=d+1;var h=n(l),f={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==h)e[h].references++,e[h].updater(f);else{var m=o(f,r);r.byIndex=s,e.splice(s,0,{identifier:l,updater:m,references:1})}i.push(l)}return i}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var a=r(t=t||[],o=o||{});return function(t){t=t||[];for(var i=0;i<a.length;i++){var s=n(a[i]);e[s].references--}for(var c=r(t,o),u=0;u<a.length;u++){var d=n(a[u]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=c}}},659:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},540:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},56:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},825:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},113:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},778:(t,e,n)=>{t.exports=n.p+"c2e444fd4e26b791b257.ttf"},643:(t,e,n)=>{t.exports=n.p+"bf8c1b0ebc400b82bfcb.png"}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return t[r](a,a.exports,n),a.exports}n.m=t,n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");if(r.length)for(var o=r.length-1;o>-1&&(!t||!/^http(s?):/.test(t));)t=r[o--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),n.b=document.baseURI||self.location.href,n.nc=void 0;var r=n(72),o=n.n(r),a=n(825),i=n.n(a),s=n(659),c=n.n(s),u=n(56),d=n.n(u),l=n(540),h=n.n(l),f=n(113),m=n.n(f),A=n(484),p={};p.styleTagTransform=m(),p.setAttributes=d(),p.insert=c().bind(null,"head"),p.domAPI=i(),p.insertStyleElement=h(),o()(A.A,p),A.A&&A.A.locals&&A.A.locals;const g=document.querySelector(".weather-app"),y=[document.querySelector(".temperature-disp"),document.querySelector(".location-details"),document.querySelector(".weather-gif"),document.querySelector(".brief-summary"),document.querySelector(".weather-forecast"),document.querySelector(".weathercast-description"),document.querySelector(".toggle-details"),document.querySelector(".last-searches")];function b(){const t=document.querySelector(".loading-component");t&&g.removeChild(t),y.forEach((t=>t.style.opacity=1))}const w=document.querySelector(".weather-app");const C={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function x(t){return(e={})=>{const n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}const v={date:x({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:x({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:x({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},B={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function I(t){return(e,n)=>{let r;if("formatting"===(n?.context?String(n.context):"standalone")&&t.formattingValues){const e=t.defaultFormattingWidth||t.defaultWidth,o=n?.width?String(n.width):e;r=t.formattingValues[o]||t.formattingValues[e]}else{const e=t.defaultWidth,o=n?.width?String(n.width):t.defaultWidth;r=t.values[o]||t.values[e]}return r[t.argumentCallback?t.argumentCallback(e):e]}}const S={ordinalNumber:(t,e)=>{const n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:I({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:I({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:t=>t-1}),month:I({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:I({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:I({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function k(t){return(e,n={})=>{const r=n.width,o=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],a=e.match(o);if(!a)return null;const i=a[0],s=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],c=Array.isArray(s)?function(t){for(let e=0;e<t.length;e++)if(t[e].test(i))return e}(s):function(t){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e)&&t[e].test(i))return e}(s);let u;return u=t.valueCallback?t.valueCallback(c):c,u=n.valueCallback?n.valueCallback(u):u,{value:u,rest:e.slice(i.length)}}}const M={ordinalNumber:(E={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:t=>parseInt(t,10)},(t,e={})=>{const n=t.match(E.matchPattern);if(!n)return null;const r=n[0],o=t.match(E.parsePattern);if(!o)return null;let a=E.valueCallback?E.valueCallback(o[0]):o[0];return a=e.valueCallback?e.valueCallback(a):a,{value:a,rest:t.slice(r.length)}}),era:k({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:k({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:t=>t+1}),month:k({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:k({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:k({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};var E;const P={code:"en-US",formatDistance:(t,e,n)=>{let r;const o=C[t];return r="string"==typeof o?o:1===e?o.one:o.other.replace("{{count}}",e.toString()),n?.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:v,formatRelative:(t,e,n,r)=>B[t],localize:S,match:M,options:{weekStartsOn:0,firstWeekContainsDate:1}};let D={};function T(){return D}Math.pow(10,8);const W=6048e5,q=864e5;function z(t){const e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new t.constructor(+t):"number"==typeof t||"[object Number]"===e||"string"==typeof t||"[object String]"===e?new Date(t):new Date(NaN)}function Y(t){const e=z(t);return e.setHours(0,0,0,0),e}function j(t){const e=z(t),n=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return n.setUTCFullYear(e.getFullYear()),+t-+n}function O(t,e){return t instanceof Date?new t.constructor(e):new Date(e)}function N(t){const e=z(t);return function(t,e){const n=Y(t),r=Y(e),o=+n-j(n),a=+r-j(r);return Math.round((o-a)/q)}(e,function(t){const e=z(t),n=O(t,0);return n.setFullYear(e.getFullYear(),0,1),n.setHours(0,0,0,0),n}(e))+1}function F(t,e){const n=T(),r=e?.weekStartsOn??e?.locale?.options?.weekStartsOn??n.weekStartsOn??n.locale?.options?.weekStartsOn??0,o=z(t),a=o.getDay(),i=(a<r?7:0)+a-r;return o.setDate(o.getDate()-i),o.setHours(0,0,0,0),o}function L(t){return F(t,{weekStartsOn:1})}function H(t){const e=z(t),n=e.getFullYear(),r=O(t,0);r.setFullYear(n+1,0,4),r.setHours(0,0,0,0);const o=L(r),a=O(t,0);a.setFullYear(n,0,4),a.setHours(0,0,0,0);const i=L(a);return e.getTime()>=o.getTime()?n+1:e.getTime()>=i.getTime()?n:n-1}function Q(t){const e=z(t),n=+L(e)-+function(t){const e=H(t),n=O(t,0);return n.setFullYear(e,0,4),n.setHours(0,0,0,0),L(n)}(e);return Math.round(n/W)+1}function $(t,e){const n=z(t),r=n.getFullYear(),o=T(),a=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??o.firstWeekContainsDate??o.locale?.options?.firstWeekContainsDate??1,i=O(t,0);i.setFullYear(r+1,0,a),i.setHours(0,0,0,0);const s=F(i,e),c=O(t,0);c.setFullYear(r,0,a),c.setHours(0,0,0,0);const u=F(c,e);return n.getTime()>=s.getTime()?r+1:n.getTime()>=u.getTime()?r:r-1}function G(t,e){const n=z(t),r=+F(n,e)-+function(t,e){const n=T(),r=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??n.firstWeekContainsDate??n.locale?.options?.firstWeekContainsDate??1,o=$(t,e),a=O(t,0);return a.setFullYear(o,0,r),a.setHours(0,0,0,0),F(a,e)}(n,e);return Math.round(r/W)+1}function X(t,e){return(t<0?"-":"")+Math.abs(t).toString().padStart(e,"0")}const R={y(t,e){const n=t.getFullYear(),r=n>0?n:1-n;return X("yy"===e?r%100:r,e.length)},M(t,e){const n=t.getMonth();return"M"===e?String(n+1):X(n+1,2)},d:(t,e)=>X(t.getDate(),e.length),a(t,e){const n=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:(t,e)=>X(t.getHours()%12||12,e.length),H:(t,e)=>X(t.getHours(),e.length),m:(t,e)=>X(t.getMinutes(),e.length),s:(t,e)=>X(t.getSeconds(),e.length),S(t,e){const n=e.length,r=t.getMilliseconds();return X(Math.trunc(r*Math.pow(10,n-3)),e.length)}},U={G:function(t,e,n){const r=t.getFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){const e=t.getFullYear(),r=e>0?e:1-e;return n.ordinalNumber(r,{unit:"year"})}return R.y(t,e)},Y:function(t,e,n,r){const o=$(t,r),a=o>0?o:1-o;return"YY"===e?X(a%100,2):"Yo"===e?n.ordinalNumber(a,{unit:"year"}):X(a,e.length)},R:function(t,e){return X(H(t),e.length)},u:function(t,e){return X(t.getFullYear(),e.length)},Q:function(t,e,n){const r=Math.ceil((t.getMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return X(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){const r=Math.ceil((t.getMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return X(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){const r=t.getMonth();switch(e){case"M":case"MM":return R.M(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){const r=t.getMonth();switch(e){case"L":return String(r+1);case"LL":return X(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,e,n,r){const o=G(t,r);return"wo"===e?n.ordinalNumber(o,{unit:"week"}):X(o,e.length)},I:function(t,e,n){const r=Q(t);return"Io"===e?n.ordinalNumber(r,{unit:"week"}):X(r,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getDate(),{unit:"date"}):R.d(t,e)},D:function(t,e,n){const r=N(t);return"Do"===e?n.ordinalNumber(r,{unit:"dayOfYear"}):X(r,e.length)},E:function(t,e,n){const r=t.getDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){const o=t.getDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return X(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){const o=t.getDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return X(a,e.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(t,e,n){const r=t.getDay(),o=0===r?7:r;switch(e){case"i":return String(o);case"ii":return X(o,e.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){const r=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){const r=t.getHours();let o;switch(o=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(t,e,n){const r=t.getHours();let o;switch(o=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){let e=t.getHours()%12;return 0===e&&(e=12),n.ordinalNumber(e,{unit:"hour"})}return R.h(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getHours(),{unit:"hour"}):R.H(t,e)},K:function(t,e,n){const r=t.getHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):X(r,e.length)},k:function(t,e,n){let r=t.getHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):X(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getMinutes(),{unit:"minute"}):R.m(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getSeconds(),{unit:"second"}):R.s(t,e)},S:function(t,e){return R.S(t,e)},X:function(t,e,n){const r=t.getTimezoneOffset();if(0===r)return"Z";switch(e){case"X":return _(r);case"XXXX":case"XX":return V(r);default:return V(r,":")}},x:function(t,e,n){const r=t.getTimezoneOffset();switch(e){case"x":return _(r);case"xxxx":case"xx":return V(r);default:return V(r,":")}},O:function(t,e,n){const r=t.getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+J(r,":");default:return"GMT"+V(r,":")}},z:function(t,e,n){const r=t.getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+J(r,":");default:return"GMT"+V(r,":")}},t:function(t,e,n){return X(Math.trunc(t.getTime()/1e3),e.length)},T:function(t,e,n){return X(t.getTime(),e.length)}};function J(t,e=""){const n=t>0?"-":"+",r=Math.abs(t),o=Math.trunc(r/60),a=r%60;return 0===a?n+String(o):n+String(o)+e+X(a,2)}function _(t,e){return t%60==0?(t>0?"-":"+")+X(Math.abs(t)/60,2):V(t,e)}function V(t,e=""){const n=t>0?"-":"+",r=Math.abs(t);return n+X(Math.trunc(r/60),2)+e+X(r%60,2)}const Z=(t,e)=>{switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},K=(t,e)=>{switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},tt={p:K,P:(t,e)=>{const n=t.match(/(P+)(p+)?/)||[],r=n[1],o=n[2];if(!o)return Z(t,e);let a;switch(r){case"P":a=e.dateTime({width:"short"});break;case"PP":a=e.dateTime({width:"medium"});break;case"PPP":a=e.dateTime({width:"long"});break;default:a=e.dateTime({width:"full"})}return a.replace("{{date}}",Z(r,e)).replace("{{time}}",K(o,e))}},et=/^D+$/,nt=/^Y+$/,rt=["D","DD","YY","YYYY"];function ot(t){if(!(e=t,e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)||"number"==typeof t))return!1;var e;const n=z(t);return!isNaN(Number(n))}const at=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,it=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,st=/^'([^]*?)'?$/,ct=/''/g,ut=/[a-zA-Z]/;function dt(t){const e=t.match(st);return e?e[1].replace(ct,"'"):t}function lt(t){return t.split(" ").slice(0,2).join(" ")}function ht(){return function(t,e,n){const r=T(),o=n?.locale??r.locale??P,a=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,i=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??r.weekStartsOn??r.locale?.options?.weekStartsOn??0,s=z(t);if(!ot(s))throw new RangeError("Invalid time value");let c=e.match(it).map((t=>{const e=t[0];return"p"===e||"P"===e?(0,tt[e])(t,o.formatLong):t})).join("").match(at).map((t=>{if("''"===t)return{isToken:!1,value:"'"};const e=t[0];if("'"===e)return{isToken:!1,value:dt(t)};if(U[e])return{isToken:!0,value:t};if(e.match(ut))throw new RangeError("Format string contains an unescaped latin alphabet character `"+e+"`");return{isToken:!1,value:t}}));o.localize.preprocessor&&(c=o.localize.preprocessor(s,c));const u={firstWeekContainsDate:a,weekStartsOn:i,locale:o};return c.map((r=>{if(!r.isToken)return r.value;const a=r.value;return(!n?.useAdditionalWeekYearTokens&&function(t){return nt.test(t)}(a)||!n?.useAdditionalDayOfYearTokens&&function(t){return et.test(t)}(a))&&function(t,e,n){const r=function(t,e,n){const r="Y"===t[0]?"years":"days of the month";return`Use \`${t.toLowerCase()}\` instead of \`${t}\` (in \`${e}\`) for formatting ${r} to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`}(t,e,n);if(console.warn(r),rt.includes(t))throw new RangeError(r)}(a,e,String(t)),(0,U[a[0]])(s,a,o.localize,u)})).join("")}(new Date,"EEEE, MMM d, yyyy, h:mm a")}const ft=document.querySelector('input[type="search"]'),mt=document.querySelector(".search-icon"),At=document.querySelector(".temp-disp"),pt=document.querySelector(".windspeed"),gt=document.querySelector(".latitude"),yt=document.querySelector(".longitude"),bt=document.querySelector(".animation"),wt=document.querySelector("h3"),Ct=document.querySelector(".short-text"),xt=document.querySelector("h1"),vt=document.querySelector(".identifier"),Bt=document.querySelector(".full-text"),It=document.querySelector(".toggler"),St=document.querySelector(".data-view"),kt=document.querySelector(".last-searches"),Mt=[];function Et(){const t=Mt[0].formattedLocation,e=Mt[0].temperature;St.textContent="";const n=document.createElement("p");var r;n.textContent=`The temperature of ${t} is ${(r=e,1.8*r+32).toFixed(1)}°F`,It.textContent="Hide Details",St.appendChild(n)}function Pt(){It.textContent="See Details",St.textContent=""}function Dt(){Mt.forEach((t=>{const{temperature:e,formattedLocation:n}=t,r=document.createElement("div"),o=document.createElement("p"),a=document.createElement("p");o.textContent=`${e}°C`,a.textContent=lt(n),r.append(o,a),kt.appendChild(r)}))}mt.addEventListener("click",(function(){const t=ft.value;y.forEach((t=>t.style.opacity=0)),function(){const t=document.createElement("div");t.setAttribute("class","loading-component");const e=document.createElement("h3");e.textContent="Hold a moment, fetching you weather forecast...",t.appendChild(e),g.appendChild(t)}(),async function(t){try{const e=await fetch(`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${t}?unitGroup=us&key=VCS46D95CZEECUCCK4GBF554A&contentType=json`,{mode:"cors"}),n=await e.json();if(n)return n}catch(t){!function(t){console.log(t);const e=document.querySelector(".loading-component");e.textContent="",e.textContent="Ooops, failed to fetch. Please check your connection and try again",t instanceof SyntaxError&&t.message.includes("Bad API ")&&(e.textContent="",e.textContent="Ooops! Your Location is unavailable. Please enter a valid location!"),setTimeout((()=>{b()}),3e3)}(t)}}(t).then((t=>async function(t){if(void 0===t)return void console.log("No data for GIF");const e=t.days[0].conditions;try{const n=await fetch(`https://api.giphy.com/v1/gifs/search?api_key=cdV83dbgRL2VFc2iNoBozLAQFezGJQY6&q=${e}&limit=25&offset=0&rating=g&lang=en&bundle=messaging_non_clips`,{mode:"cors"}),r=await n.json();if(!(r.data&&r.data.length>0))throw new Error("Gif not found!");{const e=r.data[0].images.original.url;if(e)return t.days[0].icon=e,t}}catch(t){!function(t){console.log(t);const e=document.querySelector(".weather-gif");w.removeChild(e)}(t)}}(t))).then((t=>{return void 0===(e=t)?void console.log("No data for Object"):{temperature:e.days[0].temp,weatherForecast:e.days[0].conditions,WeatherDescription:e.days[0].description,weatherSummary:e.description,weatherIcon:e.days[0].icon,humidity:e.days[0].humidity,latitude:e.latitude,longitude:e.longitude,resolvedLocationName:e.resolvedAddress,windSpeed:e.days[0].windspeed};var e})).then((t=>function(t){if(t){const{temperature:e,resolvedLocationName:n}=t,r=lt(n);return console.log("Adding to store:",{temperature:e,formattedLocation:r}),Mt.unshift({temperature:e,formattedLocation:r}),console.log(`Added new Object. New store length is ${Mt.length}`),Mt.length>5&&(Mt.pop(),console.log(`Removed oldest Object. New store length is ${Mt.length}`)),function(t){try{localStorage.setItem("weatherSearches",JSON.stringify(t))}catch(t){console.error("Error saving to local storage:",t)}}(Mt),t}}(t))).then((t=>function(t){try{t&&(At.textContent="",pt.textContent="",gt.textContent="",yt.textContent="",bt.textContent="",wt.textContent="",Ct.textContent="",xt.textContent="",vt.textContent="",Bt.textContent="",It.style.display="none",St.textContent="",kt.innerHTML="",At.textContent=t.temperature,pt.textContent=t.windSpeed,gt.textContent=t.latitude,yt.textContent=t.longitude,bt.src=t.weatherIcon,wt.textContent=lt(t.resolvedLocationName),Ct.textContent=t.weatherSummary,xt.textContent=t.weatherForecast,vt.textContent=`${t.resolvedLocationName}, ${ht()}`,Bt.textContent=t.WeatherDescription,It.style.display="block",Dt())}catch(t){console.log("Error updating display:",t)}}(t))).then(b).catch((t=>console.log(`A promise failed: ${t}`)))})),It.addEventListener("click",(()=>function(t){"See Details"===t.textContent?Et():"Hide Details"===t.textContent&&Pt()}(It))),addEventListener("DOMContentLoaded",(function(){const t=document.querySelector(".identifier"),e=`${t.textContent.split(", ")[0]} ${ht()}`;t.textContent="",t.textContent=e}(),document.querySelector(".last-searches").textContent="",function(t){const e=JSON.parse(localStorage.getItem("weatherSearches"));e&&e.length>0&&(t.length=0,t.push(...e))}(Mt),Dt(),void console.log("loaded")))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,